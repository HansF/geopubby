#parse("header.vm")
<div class="container-fluid">
<div class="row-fluid" id="main-wrapper">
#if ($image)
    <div class="image">
    <img src="$image" style="max-width:500px;max-height:500px" alt="Depiction of $resource.label" title="Depiction of $title" />
    </div>
#end
<script>
var webbase="$server_base"
var datasetbase="$sourceURLs"
var stylestring="$styleWithHtml".replace(/&quot;/g, '\"');
console.log(stylestring)
var styles=JSON.parse(stylestring)
function getClassHierarchy(classeswithinstances){
console.log(JSON.stringify(classeswithinstances))
// ?subject a owl:Class . NOT{ ?subject rdfs:subClassOf <http://www.xplanung.de/xplangml/5/0#> } .
//?subject a owl:Class . } UNION 
// (COUNT(?individual) AS ?individualc )
query= "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n"
+"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
+"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n"
+"SELECT DISTINCT ?subject ?label ?supertype\n"
+"WHERE {\n"
+"   { ?subject rdf:type owl:Class . } UNION { ?individual rdf:type ?subject . } .\n"
+"   OPTIONAL { ?subject rdfs:subClassOf ?supertype } .\n"
+"   OPTIONAL { ?subject rdfs:label ?label }.\n"
+"    FILTER (\n"
+"        (\n"
+"        ?subject != owl:Class &&\n"
+"        ?subject != rdf:List &&\n"
+"        ?subject != rdf:Property &&\n"
+"        ?subject != rdfs:Class &&\n"
+"        ?subject != rdfs:Datatype &&\n"
+"        ?subject != rdfs:ContainerMembershipProperty &&\n"
+"        ?subject != owl:DatatypeProperty &&\n"
+"        ?subject != owl:AnnotationProperty &&\n"
+"        ?subject != owl:Restriction &&\n"
+"        ?subject != owl:ObjectProperty &&\n"
+"        ?subject != owl:NamedIndividual &&\n"
+"        ?subject != owl:Ontology) )\n"
+"}\n"
console.log(query)
d3.sparql($('#endpointselect').val(), query,{method: 'POST'}).then((results) => {
       console.log(results)
        prefixurl=""
        if($('#endpointselect').prop('selectedIndex')<srcurls.length){
        	prefixurl=srcurls[$('#endpointselect').prop('selectedIndex')]        
        }
        ress={}
        var tree={ "plugins": ["search", "types","sort","contextmenu"],"search": {}, "core": { "data" :[]}}
        tree["core"]["data"].push({ "id" : "http://www.w3.org/2002/07/owl#Thing", "icon" : "https://raw.githubusercontent.com/protegeproject/protege/master/protege-editor-owl/src/main/resources/Classes.gif","parent" : "#", "text" : "owl:Thing" })
        for(res in results){
            //console.log(results[res])
			//console.log(res)
            //if("value" in results[res]["subject"])
             //   console.log(results[res]["subject"])
            if(!(results[res]["subject"].includes("_:")) && results[res]["subject"].startsWith("http") && (typeof results[res]["subject"]["individual"] ==='undefined')){
                        ress[results[res]["subject"]]={"super":(("supertype" in results[res] &&  results[res]["supertype"]!=null && !(results[res]["supertype"].includes("_:")) && results[res]["supertype"].startsWith("http"))?results[res]["supertype"]:"http://www.w3.org/2002/07/owl#Thing"),"count":"","label":(results[res]["label"]!=null?results[res]["label"]:"")}//results[res]["indidivualc"]}
			if(results[res]["supertype"]!=null && !(results[res]["supertype"] in classeswithinstances) && !(results[res]["supertype"].includes("_:")) && results[res]["supertype"].startsWith("http") ){
                                classeswithinstances[results[res]["supertype"]]=true
                        }
           }
        }

        console.log(classeswithinstances)
        clsMap={}
        superMap={}
        for(clss in ress){
            cls=clss
            if(prefixurl!=""){
            	cls=cls.replace(prefixurl,"$server_base");
            }
            clsMap[cls]=true;
            superMap[ress[cls]["super"]]=true;
			if(cls.includes("_:") || !(cls.startsWith("http"))){
				continue;
			}
            //if(Object.keys(classeswithinstances).length==0 || (Object.keys(classeswithinstances).length>0 && cls in classeswithinstances)){
					prefix=cls.substring(0,cls.lastIndexOf('#')+1);
					console.log("PREFIX: "+prefix)
					addpref=""
					if(prefix in prefixMap){
						addpref=prefixMap[prefix]+":"
					}
					/*	result+="<option value=\""+results[res]["cls"]+"\">"+((results[res]["clsLabel"]!=null && results[res]["clsLabel"]!=null)?
						addpref+results[res]["clsLabel"]:addpref+results[res]["cls"].substring(results[res]["cls"].lastIndexOf('#')+1))+"</option>"
						resultlist[results[res]["cls"]]=true*/
					console.log(cls+" - "+(ress[cls]["super"].includes("_:") || !(results[res]["subject"].startsWith("http"))?"#":ress[cls]["super"]))
					textcut=addpref
					if(ress[cls]["label"]!=""){
						textcut=ress[cls]["label"]+" ("
						if(cls.includes("#")){
						textcut+=cls.substring(cls.lastIndexOf('#')+1)+(ress[cls]["count"]!=""?"("+ress[cls]["count"]+")":"")
						}else if(cls.startsWith("http")){
							textcut+=cls.substring(cls.lastIndexOf('/')+1)+(ress[cls]["count"]!=""?"("+ress[cls]["count"]+")":"")
						}else{
							textcut+=cls+(ress[cls]["count"]!=""?"("+ress[cls]["count"]+")":"")
						}
						textcut+=")"
					}else{
						if(cls.includes("#")){
							textcut=cls.substring(cls.lastIndexOf('#')+1)+(ress[cls]["count"]!=""?"("+ress[cls]["count"]+")":"")
						}else if(cls.startsWith("http")){
							textcut=cls.substring(cls.lastIndexOf('/')+1)+(ress[cls]["count"]!=""?"("+ress[cls]["count"]+")":"")
						}else{
							textcut=cls+(ress[cls]["count"]!=""?"("+ress[cls]["count"]+")":"")
						}
					}
					
					if(cls!=ress[cls]["super"]){
						tree["core"]["data"].push({ "id" : cls, "parent" : ((ress[cls]["super"].includes("_:") || !(results[res]["subject"].startsWith("http")))?"#":ress[cls]["super"]), 
						"icon" : "https://raw.githubusercontent.com/protegeproject/protege/master/protege-editor-owl/src/main/resources/Classes.gif", 
					"text" : textcut })
					}else{
						tree["core"]["data"].push({ "id" : cls, "parent" : "#", 
						"icon" : "https://raw.githubusercontent.com/protegeproject/protege/master/protege-editor-owl/src/main/resources/Classes.gif", 
					"text" : textcut })
					}
					
            //}
        }
        for(cls in superMap){
                if(!(cls in clsMap)){
                        console.log("Not defined superClass: "+cls)
                        tree["core"]["data"].push({ "id" : cls, "parent" : "#", 
						"icon" : "https://raw.githubusercontent.com/protegeproject/protege/master/protege-editor-owl/src/main/resources/Classes.gif", 
					"text" : cls })
                }
        }
        tree["core"]["types"]={"file" : {"icon" : "https://raw.githubusercontent.com/protegeproject/protege/master/protege-editor-owl/src/main/resources/Classes.gif"},"default" : {"icon" : "https://raw.githubusercontent.com/protegeproject/protege/master/protege-editor-owl/src/main/resources/Classes.gif","valid_children" : ["default"]}}
        tree["plugins"]=["search","sort","state","types","contextmenu"]
		tree["contextmenu"]={}
		tree["contextmenu"]["items"]=function (node) {
                        return {
                            "addfeaturetype": {
                                "separator_before": false,
                                "separator_after": false,
                                "label": "Add as feature type",
                                "action": function (obj) {
                                    console.log(node)
									if (confirm('Add "'+node.id+' as a feature type "?'))
										console.log("Adding feature type to the SemanticWFS")
                                    console.log("Add Feature Type")                                    
                                }
                            },
							"lookupdefinition": {
                                "separator_before": false,
                                "separator_after": false,
                                "label": "Lookup definition",
                                "action": function (obj) {
									var win = window.open(node.id, '_blank');
									win.focus();                                 
                                }
                            }
                        };
		}
		console.log(JSON.stringify(tree))
       try{
            $('#jstree').jstree("destroy");
        }catch(err){}
        $('#jstree').jstree(tree);
        $('#jstree').bind("dblclick.jstree", function (event) {
   			var node = $(event.target).closest("li");
   			var data = node[0].id
   			console.log(data)
   			console.log(node)
   			window.open(data, '_blank');
		});
		var to = false;
		$('#classsearch').keyup(function () {
		console.log("KEY UP")
    if(to) { clearTimeout(to); }
    to = setTimeout(function () {
      var v = $('#classsearch').val();
      $('#jstree').jstree(true).search(v,false,true);
    }, 250);
  });
});
}


function getAllClasses(){
    d3.sparql($('#endpointselect').val(), prefixList+" SELECT DISTINCT ?cls ?clsLabel  WHERE {?ind rdf:type ?cls . ?ind ?rel ?geo. ?geo geo:asWKT ?wkt  . ?cls rdf:type owl:Class . OPTIONAL{?cls rdfs:label ?clsLabel. }} ORDER BY ?cls").then((results) => {
	//currdfstore.execute(, function(success,results){ 
        //console.log(success,results)
		result="";
		resultlist={}
				for(res in results){
					if(!results[res]["cls"].startsWith("_")){
					prefix=results[res]["cls"].substring(0,results[res]["cls"].lastIndexOf('#')+1);
					addpref=""
					if(prefix in prefixMap){
						addpref=prefixMap[prefix]+":"
					}
						result+="<option value=\""+results[res]["cls"]+"\">"+((results[res]["clsLabel"]!=null && results[res]["clsLabel"]!=null)?
						addpref+results[res]["clsLabel"]:addpref+results[res]["cls"].substring(results[res]["cls"].lastIndexOf('#')+1))+"</option>"
						resultlist[results[res]["cls"]]=true
					}
				}
		getClassHierarchy(resultlist)		
		//$('#classeslist').html(result);
		$('#classeslist2').html("<option value=\"?\">?</option>"+result);
		$('#classeslist3').html(result);
		$('#classeslist4').html(result);
                
	});

}
function remoteSPARQLQuery(endpoint,query){
            $.ajax({
                url: endpoint,
                accepts: {json: "application/sparql-results+json"},
                data: {query: query},
                dataType: "json", success: function(result){
				console.log(result)
				handleResults(result)
                }});
}
</script>
#if (!$geoms.isEmpty())
<a name="geo"></a>
<div id="map" style="height:500px;z-index: 0;">
</div>
<script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"></script>
<script src="https://api.mapbox.com/mapbox.js/plugins/leaflet-fullscreen/v1.0.1/Leaflet.fullscreen.min.js"></script>
<script type="text/javascript" src="${server_base}static/Leaflet.geojsoncss.min.js"></script>
<script type="text/javascript">
var overlayMaps={}
var map = L.map('map',{fullscreenControl: true,fullscreenControlOptions: {position: 'topleft'}}).setView([51.505, -0.09], 13);
	var layer=L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
	});
	var wmsLayer = L.tileLayer.wms('https://sgx.geodatenzentrum.de/wms_topplus_web_open', {
		layers: 'web',
		format: 'image/png',
 			transparent: true,
			attribution: '&copy; Bundesamt f&uuml;r Kartographie und Geod&auml;sie 2017, <a href="http://sg.geodatenzentrum.de/web_public/Datenquellen_TopPlus_Open.pdf">Datenquellen</a>'
		});
	var baseMaps = {
        "OSM": layer
	};
	baseMaps["OSM"].addTo(map);
	L.control.scale({
	position: 'bottomright',
	imperial: false
	}).addTo(map);
	if(styles.length>0){
		var legend = L.control({position: 'bottomleft'});
		legend.onAdd = function (map) {
    		var div = L.DomUtil.create('div', 'info legend');
    		addhtml="Select style:<select id=\"style\"></select>"
    		for(obj in styles){
    			addhtml="<option value=\"1\">obj</option>"
    		}
    		div.innerHTML = addhtml;
    		//div.firstChild.onmousedown = div.firstChild.ondblclick = L.DomEvent.stopPropagation;
    		return div;
		};
		legend.addTo(map);	
	}
	layercontrol=L.control.layers(baseMaps,overlayMaps).addTo(map);
	var bounds = L.latLngBounds([]);
        #foreach($i in $geoms)
              var wkt_geom = "${i}";
              var sridepsg="${i.getSRID()}";
              var globalepsg="${epsg}";
              var epsg="EPSG:4326";
              if(sridepsg!="0"){
                  var epsg="EPSG:${i.getSRID()}"
              }else if(sridepsg=="0" && globalepsg!="null" && globalepsg!=""){
                  var epsg="EPSG:${epsg}"
              }
			  var wicket = new Wkt.Wkt();
              wicket.read(wkt_geom);
              props={}
              #set($x = 0)
              #foreach ($property in $properties)
                  #if($x < 10)
                     props["${property.BrowsableURL}"]=[
                     #foreach ($propval in $property.SimpleValues)
                        #if ($propval.Node.isURI())
                            {"uri":"${propval.BrowsableURL}","proplabel":
                            #if ($showLabels && $property.label)
                                "$property.label"
                            #elseif($property.hasPrefix())
                                "$property.Prefix:$property.LocalName"
                            #else
                                "?:$property.LocalName"
                            #end
                            ,"vallabel":
                            #if ($showLabels && $propval.label)
                                "$propval.label"
                            #elseif($propval.hasPrefix())
                                "$propval.Prefix:$propval.LocalName"
                            #else
                                "?:$propval.LocalName"
                            #end
                            }
                        #elseif ($propval.Node.isLiteral())
                            {"uri":"${propval.Node.LiteralLexicalForm}","proplabel":
                            #if ($showLabels && $property.label)
                                "$property.label"
                            #elseif($property.hasPrefix())
                                "$property.Prefix:$property.LocalName"
                            #else
                                "?:$property.LocalName"
                            #end
                            }
                        #end
                        #if( $foreach.hasNext ),#end
                     #end
                    ]
                  #end
                  #set($x = $x+1)
              #end
			  var feature = { "type": "Feature", 'properties': props, "geometry": wicket.toJson() };
			  if(epsg!="" && epsg!="EPSG:4326" && epsg in epsgdefs){
			  	if(styles.length==0){
			  		feature=convertGeoJSON(feature,epsgdefs[epsg],{"Point":{},"LineString":{},"Polygon":{}})
			  	}else{
	            	feature=convertGeoJSON(feature,epsgdefs[epsg],styles[0])			  	
			  	}
	            console.log(feature);
              }else{
                if(styles.length==0){
                	feature=applyStyle(feature,{"Point":{},"LineString":{},"Polygon":{}})
                }else{
              		feature=applyStyle(feature,styles[0])                
                }
              }
              console.log(feature);
              layerr=L.geoJSON.css(feature,{
                   pointToLayer: function(feature, latlng){
                  var greenIcon = new L.Icon({
                    iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-black.png',
                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    shadowSize: [41, 41]
                });
                return L.marker(latlng, {icon: greenIcon});
              },
              onEachFeature: function (feature, layer) {
              		var popup="<b><a href=\"$uri\" class=\"footeruri\" target=\"_blank\">$title</a></b><br/><ul>"
                    for(prop in feature.properties){
                        if((typeof prop !== 'undefined') && feature.properties[prop]!=='undefined' && feature.properties[prop].length>0 && "proplabel" in feature.properties[prop][0] &&  feature.properties[prop][0]["proplabel"]!=='undefined'){
                            popup+="<li><a href=\""+prop+"\" target=\"_blank\" class=\"uri\">"+feature.properties[prop][0]["proplabel"]+"</a> - "
                        }else if((typeof prop !== 'undefined') && prop.includes("http")){
                        	popup+="<li><a href=\""+prop+"\" target=\"_blank\" class=\"uri\">"+prop.substring(prop.lastIndexOf('/')+1)+"</a> - "
                        }else{
                        	popup+="<li>"+prop+" - "
                        }
                        if(feature.properties[prop].length==1){
                            if((typeof feature.properties[prop][0] !== 'undefined') && "uri" in feature.properties[prop][0] && feature.properties[prop][0]["uri"].startsWith("http")){
                        	        popup+="<a href=\""+feature.properties[prop][0]["uri"]+"\" class=\"uri\" target=\"_blank\">"
                                    if("vallabel" in feature.properties[prop][0]){
                                        popup+=feature.properties[prop][0]["vallabel"]+"</a></li>"
                                    }else{
                                        popup+=feature.properties[prop][0]["uri"].substring(feature.properties[prop][0]["uri"].lastIndexOf('/')+1)+"</a></li>"
                                    }
                            }else if((typeof feature.properties[prop][0]["uri"] !== 'undefined') && feature.properties[prop][0]["uri"].startsWith("www.")){
                                    popup+="<a href=\"http://"+feature.properties[prop][0]["uri"]+"\" class=\"uri\" target=\"_blank\">"
                                    if("vallabel" in feature.properties[prop][0]){
                                        popup+=feature.properties[prop][0]["vallabel"]+"</a></li>"
                                    }else{
                                        popup+=feature.properties[prop][0]["uri"]+"</a></li>"
                                    }
                            }else if((typeof feature.properties[prop][0]["uri"] !== 'undefined') && feature.properties[prop][0]["uri"].includes("@")){
                                    popup+="<a href=\"mailto:"+feature.properties[prop][0]["uri"]+"\" class=\"uri\" target=\"_blank\">"
                                    if("vallabel" in feature.properties[prop][0]){
                                        popup+=feature.properties[prop][0]["vallabel"]+"</a></li>"
                                    }else{
                                        popup+=feature.properties[prop][0]["uri"]+"</a></li>"
                                    }
                            }else{
                        	        popup+=feature.properties[prop][0]["uri"]+"</li>"
                            }
                        }else if(feature.properties[prop].length>1){
                            popup+="<ul>"
                            for(val in feature.properties[prop]){
                                popup+="<li>"
                                if((typeof feature.properties[prop][val]["uri"] !== 'undefined') && feature.properties[prop][val]["uri"].startsWith("http")){
                        	        popup+="<a href=\""+feature.properties[prop][val]["uri"]+"\" class=\"uri\" target=\"_blank\">"
                        	        if("vallabel" in feature.properties[prop][val]){
                                        popup+=feature.properties[prop][val]["vallabel"]+"</a></li>"
                                    }else{
                                        popup+=feature.properties[prop][val]["uri"].substring(feature.properties[prop][val]["uri"].lastIndexOf('/')+1)+"</a></li>"
                                    }
                                }else if((typeof feature.properties[prop][val]["uri"] !== 'undefined') && feature.properties[prop][val]["uri"].startsWith("www.")){
                                    popup+="<a href=\"http://"+feature.properties[prop][val]["uri"]+"\" class=\"uri\" target=\"_blank\">"
                                    if("vallabel" in feature.properties[prop][val]){
                                        popup+=feature.properties[prop][val]["vallabel"]+"</a></li>"
                                    }else{
                                        popup+=feature.properties[prop][val]["uri"]+"</a></li>"
                                    }
                                }else if((typeof feature.properties[prop][val]["uri"] !== 'undefined') && feature.properties[prop][val]["uri"].includes("@")){
                                    popup+="<a href=\"mailto:"+feature.properties[prop][val]["uri"]+"\" class=\"uri\" target=\"_blank\">"
                                    if("vallabel" in feature.properties[prop][val]){
                                        popup+=feature.properties[prop][val]["vallabel"]+"</a></li>"
                                    }else{
                                        popup+=feature.properties[prop][val]["uri"]+"</a></li>"
                                    }
                                }else{
                        	        popup+=feature.properties[prop][val]["uri"]+"</li>"
                                }
                            }
                            popup+="</ul></li>"
                        }
                    }
                    popup+="</ul>"
                    layer.bindPopup(popup)
              }
              })
              layerr.addTo(map)
              var layerBounds = layerr.getBounds();
              bounds.extend(layerBounds);
        #end
        map.fitBounds(bounds);
</script>
#else
<script>
var espg="EPSG:4326";
</script>
#end
</div>
#if ($comment)
    <p class="comment">$comment</p>
#end

#if (!$properties.isEmpty())
#parse("proptable.vm")
#else
    <p>No further information is available.</p>
#end

#if ($metadata)
<div class="row-fluid">
	<a name="meta"></a>
	<h2>Metadata</h2>
	<div id="metadata-tables">
	#parse("metadatatable.vm")
	</div>
	<a href="#meta" onclick="showAllMetadata('metadata-tables')">expand all</a>
</div>
#end
</div>

#parse("footer.vm")
